/*
 * Cocktail API
 *
 * API to manage cocktail info.
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: okarians.302.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using mycocktails.api.cocktailApi.Converters;

namespace mycocktails.api.cocktailApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CocktailDetailModel : IEquatable<CocktailDetailModel>
    {
        /// <summary>
        /// Cocktail id
        /// </summary>
        /// <value>Cocktail id</value>
        [DataMember(Name="cocktailId", EmitDefaultValue=false)]
        public int CocktailId { get; set; }

        /// <summary>
        /// cocktail name.
        /// </summary>
        /// <value>cocktail name.</value>
        [DataMember(Name="cocktailName", EmitDefaultValue=false)]
        public string CocktailName { get; set; }

        /// <summary>
        /// Material id list.
        /// </summary>
        /// <value>Material id list.</value>
        [DataMember(Name="materialIdList", EmitDefaultValue=false)]
        public List<int> MaterialIdList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CocktailDetailModel {\n");
            sb.Append("  CocktailId: ").Append(CocktailId).Append("\n");
            sb.Append("  CocktailName: ").Append(CocktailName).Append("\n");
            sb.Append("  MaterialIdList: ").Append(MaterialIdList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CocktailDetailModel)obj);
        }

        /// <summary>
        /// Returns true if CocktailDetailModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CocktailDetailModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CocktailDetailModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CocktailId == other.CocktailId ||
                    
                    CocktailId.Equals(other.CocktailId)
                ) && 
                (
                    CocktailName == other.CocktailName ||
                    CocktailName != null &&
                    CocktailName.Equals(other.CocktailName)
                ) && 
                (
                    MaterialIdList == other.MaterialIdList ||
                    MaterialIdList != null &&
                    other.MaterialIdList != null &&
                    MaterialIdList.SequenceEqual(other.MaterialIdList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CocktailId.GetHashCode();
                    if (CocktailName != null)
                    hashCode = hashCode * 59 + CocktailName.GetHashCode();
                    if (MaterialIdList != null)
                    hashCode = hashCode * 59 + MaterialIdList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CocktailDetailModel left, CocktailDetailModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CocktailDetailModel left, CocktailDetailModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
