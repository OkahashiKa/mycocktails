/*
 * Material API
 *
 * API to manage material info.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: okarians.302.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using mycocktails.api.materialApi.Converters;

namespace mycocktails.api.materialApi.Models
{ 
    /// <summary>
    /// cocktail info model.
    /// </summary>
    [DataContract]
    public partial class CocktailModel : IEquatable<CocktailModel>
    {
        /// <summary>
        /// Cocktail id
        /// </summary>
        /// <value>Cocktail id</value>
        [DataMember(Name="cocktailId", EmitDefaultValue=false)]
        public int CocktailId { get; set; }

        /// <summary>
        /// Cocktail name.
        /// </summary>
        /// <value>Cocktail name.</value>
        [DataMember(Name="cocktailName", EmitDefaultValue=false)]
        public string CocktailName { get; set; }

        /// <summary>
        /// Remarks.
        /// </summary>
        /// <value>Remarks.</value>
        [DataMember(Name="cocktailRemarks", EmitDefaultValue=false)]
        public string CocktailRemarks { get; set; }

        /// <summary>
        /// Cocktail image.
        /// </summary>
        /// <value>Cocktail image.</value>
        [DataMember(Name="cocktailImage", EmitDefaultValue=false)]
        public byte[] CocktailImage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CocktailModel {\n");
            sb.Append("  CocktailId: ").Append(CocktailId).Append("\n");
            sb.Append("  CocktailName: ").Append(CocktailName).Append("\n");
            sb.Append("  CocktailRemarks: ").Append(CocktailRemarks).Append("\n");
            sb.Append("  CocktailImage: ").Append(CocktailImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CocktailModel)obj);
        }

        /// <summary>
        /// Returns true if CocktailModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CocktailModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CocktailModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CocktailId == other.CocktailId ||
                    
                    CocktailId.Equals(other.CocktailId)
                ) && 
                (
                    CocktailName == other.CocktailName ||
                    CocktailName != null &&
                    CocktailName.Equals(other.CocktailName)
                ) && 
                (
                    CocktailRemarks == other.CocktailRemarks ||
                    CocktailRemarks != null &&
                    CocktailRemarks.Equals(other.CocktailRemarks)
                ) && 
                (
                    CocktailImage == other.CocktailImage ||
                    CocktailImage != null &&
                    CocktailImage.Equals(other.CocktailImage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CocktailId.GetHashCode();
                    if (CocktailName != null)
                    hashCode = hashCode * 59 + CocktailName.GetHashCode();
                    if (CocktailRemarks != null)
                    hashCode = hashCode * 59 + CocktailRemarks.GetHashCode();
                    if (CocktailImage != null)
                    hashCode = hashCode * 59 + CocktailImage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CocktailModel left, CocktailModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CocktailModel left, CocktailModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
