/*
 * Materials API
 *
 * API to manage material info.
 *
 * The version of the OpenAPI document: 0.2.7
 * Contact: okarians.302.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using mycocktails.api.materialApi.Attributes;
using mycocktails.api.materialApi.Models;
using mycocktails.library.common.Models;

namespace mycocktails.api.materialApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DeleteMaterialsApiController : ControllerBase
    { 
        /// <summary>
        /// Delete user material info.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="materialId">Material id.</param>
        /// <response code="201"></response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/api/v1/materials/user_material")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(CommonMessageModel))]
        [ProducesResponseType(statusCode: 401, type: typeof(CommonMessageModel))]
        [ProducesResponseType(statusCode: 409, type: typeof(CommonMessageModel))]
        [ProducesResponseType(statusCode: 500, type: typeof(CommonMessageModel))]
        public virtual IActionResult UserMaterialDelete([FromQuery (Name = "userId")][Required()]string userId, [FromQuery (Name = "materialId")][Required()]int materialId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CommonMessageModel));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(CommonMessageModel));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(CommonMessageModel));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(CommonMessageModel));

            throw new NotImplementedException();
        }
    }
}
